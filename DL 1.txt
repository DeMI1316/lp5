# Boston House Price Prediction using DNN (Linear Regression)

# 1. Import necessary libraries
import tensorflow as tf
from tensorflow import keras
from sklearn.datasets import load_boston
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# 2. Load and prepare the dataset
boston = load_boston()
X, y = boston.data, boston.target

# 3. Split into training and testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 4. Standardize features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# 5. Build a simple DNN model
model = keras.Sequential([
    keras.layers.Dense(1, input_shape=[X_train.shape[1]])  # Linear Regression (DNN style)
])

# 6. Compile the model
model.compile(optimizer='adam', loss='mse', metrics=['mae'])

# 7. Train the model
history = model.fit(X_train, y_train, epochs=100, validation_split=0.2, verbose=0)

# 8. Plot training history
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Loss Curve')
plt.xlabel('Epochs')
plt.ylabel('Mean Squared Error')
plt.legend()
plt.grid(True)
plt.show()

# 9. Evaluate the model
test_loss, test_mae = model.evaluate(X_test, y_test)
print(f"Test MAE: {test_mae:.2f}")

# 10. Predict example
predictions = model.predict(X_test[:5])
print("Predicted prices:", predictions.flatten())
print("Actual prices:   ", y_test[:5])
